/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.2.0.v202012010850.
* Used org.franca.core 0.13.1.201807231814.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_COM_QUALCOMM_QTI_LOCATION_Location_PROXY_BASE_HPP_
#define V1_COM_QUALCOMM_QTI_LOCATION_Location_PROXY_BASE_HPP_

#include <v1/com/qualcomm/qti/location/Location.hpp>


#include <v1/com/qualcomm/qti/location/LocationTypes.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#define HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <cstdint>
#include <vector>

#include <CommonAPI/Event.hpp>
#include <CommonAPI/Proxy.hpp>
#include <functional>
#include <future>

#if defined (HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE)
#undef COMMONAPI_INTERNAL_COMPILATION
#undef HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

namespace v1 {
namespace com {
namespace qualcomm {
namespace qti {
namespace location {

class LocationProxyBase
    : virtual public CommonAPI::Proxy {
public:
    typedef CommonAPI::Event<
        uint32_t
    > GnssCapabilitiesEvent;
    typedef CommonAPI::Event<
        ::v1::com::qualcomm::qti::location::LocationTypes::GnssMeasurementsT
    > GnssMeasurementReportEvent;
    typedef CommonAPI::Event<
        ::v1::com::qualcomm::qti::location::LocationTypes::LocationReportT
    > GnssLocationReportEvent;
    typedef CommonAPI::Event<
        std::vector< ::v1::com::qualcomm::qti::location::LocationTypes::LocationReportT >
    > GnssEngineLocationsReportEvent;
    typedef CommonAPI::Event<
        std::vector< ::v1::com::qualcomm::qti::location::LocationTypes::GnssSvDataT >
    > GnssSvReportEvent;
    typedef CommonAPI::Event<
        uint64_t, std::string
    > GnssNmeaEvent;
    typedef CommonAPI::Event<
        ::v1::com::qualcomm::qti::location::LocationTypes::LocOutputEngineTypeT, uint64_t, std::string
    > EngineNmeaEvent;
    typedef CommonAPI::Event<
        ::v1::com::qualcomm::qti::location::LocationTypes::GnssDataT
    > GnssDataReportEvent;

    typedef std::function<void(const CommonAPI::CallStatus&, const ::v1::com::qualcomm::qti::location::LocationTypes::LocationStatusT&)> StartPositionSessionLocationReportAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v1::com::qualcomm::qti::location::LocationTypes::LocationStatusT&)> StartPositionSessionEngineSpecificLocationAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v1::com::qualcomm::qti::location::LocationTypes::LocationStatusT&)> StopPositionSessionAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v1::com::qualcomm::qti::location::LocationTypes::LocationStatusT&)> DeleteAidingDataAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const ::v1::com::qualcomm::qti::location::LocationTypes::LocationStatusT&)> ConfigConstellationsAsyncCallback;
    typedef std::function<void(const CommonAPI::CallStatus&, const uint32_t&)> GetLocationCapabilitiesAsyncCallback;

    /**
     * @invariant Fire And Forget
     */
    virtual void InjectMapMatchedFeedbackData(::v1::com::qualcomm::qti::location::LocationTypes::MapMatchingFeedbackDataT _mmfData, CommonAPI::CallStatus &_internalCallStatus) = 0;
    virtual GnssCapabilitiesEvent& getGnssCapabilitiesEvent() = 0;
    virtual GnssMeasurementReportEvent& getGnssMeasurementReportEvent() = 0;
    virtual GnssLocationReportEvent& getGnssLocationReportEvent() = 0;
    virtual GnssEngineLocationsReportEvent& getGnssEngineLocationsReportEvent() = 0;
    virtual GnssSvReportEvent& getGnssSvReportEvent() = 0;
    virtual GnssNmeaEvent& getGnssNmeaEvent() = 0;
    virtual EngineNmeaEvent& getEngineNmeaEvent() = 0;
    virtual GnssDataReportEvent& getGnssDataReportEvent() = 0;
    virtual void StartPositionSessionLocationReport(uint32_t _intervalInMs, uint32_t _gnssReportCallbackMask, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::qualcomm::qti::location::LocationTypes::LocationStatusT &_status, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> StartPositionSessionLocationReportAsync(const uint32_t &_intervalInMs, const uint32_t &_gnssReportCallbackMask, StartPositionSessionLocationReportAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void StartPositionSessionEngineSpecificLocation(uint32_t _intervalInMs, uint32_t _locReqEngMask, uint32_t _engReportCallbackMask, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::qualcomm::qti::location::LocationTypes::LocationStatusT &_status, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> StartPositionSessionEngineSpecificLocationAsync(const uint32_t &_intervalInMs, const uint32_t &_locReqEngMask, const uint32_t &_engReportCallbackMask, StartPositionSessionEngineSpecificLocationAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void StopPositionSession(CommonAPI::CallStatus &_internalCallStatus, ::v1::com::qualcomm::qti::location::LocationTypes::LocationStatusT &_status, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> StopPositionSessionAsync(StopPositionSessionAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void DeleteAidingData(uint32_t _deleteMask, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::qualcomm::qti::location::LocationTypes::LocationStatusT &_status, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> DeleteAidingDataAsync(const uint32_t &_deleteMask, DeleteAidingDataAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void ConfigConstellations(std::vector< ::v1::com::qualcomm::qti::location::LocationTypes::GnssSvIdInfoT > _svList, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::qualcomm::qti::location::LocationTypes::LocationStatusT &_status, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> ConfigConstellationsAsync(const std::vector< ::v1::com::qualcomm::qti::location::LocationTypes::GnssSvIdInfoT > &_svList, ConfigConstellationsAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual void GetLocationCapabilities(CommonAPI::CallStatus &_internalCallStatus, uint32_t &_capabilitiesMask, const CommonAPI::CallInfo *_info = nullptr) = 0;
    virtual std::future<CommonAPI::CallStatus> GetLocationCapabilitiesAsync(GetLocationCapabilitiesAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr) = 0;

    virtual std::future<void> getCompletionFuture() = 0;
};

} // namespace location
} // namespace qti
} // namespace qualcomm
} // namespace com
} // namespace v1


// Compatibility
namespace v1_0 = v1;

#endif // V1_COM_QUALCOMM_QTI_LOCATION_Location_PROXY_BASE_HPP_
