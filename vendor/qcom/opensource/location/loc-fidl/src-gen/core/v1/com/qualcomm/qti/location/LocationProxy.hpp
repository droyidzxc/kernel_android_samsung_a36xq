/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.2.0.v202012010850.
* Used org.franca.core 0.13.1.201807231814.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_COM_QUALCOMM_QTI_LOCATION_Location_PROXY_HPP_
#define V1_COM_QUALCOMM_QTI_LOCATION_Location_PROXY_HPP_

#include <v1/com/qualcomm/qti/location/LocationProxyBase.hpp>


#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#define HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif


#if defined (HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE)
#undef COMMONAPI_INTERNAL_COMPILATION
#undef HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

namespace v1 {
namespace com {
namespace qualcomm {
namespace qti {
namespace location {

template <typename ... _AttributeExtensions>
class LocationProxy
    : virtual public Location,
      virtual public LocationProxyBase,
      virtual public _AttributeExtensions... {
public:
    LocationProxy(std::shared_ptr<CommonAPI::Proxy> delegate);
    ~LocationProxy();

    typedef Location InterfaceType;


    /**
     * Returns the CommonAPI address of the remote partner this proxy communicates with.
     */
    virtual const CommonAPI::Address &getAddress() const;

    /**
     * Returns true if the remote partner for this proxy is currently known to be available.
     */
    virtual bool isAvailable() const;

    /**
     * Returns true if the remote partner for this proxy is available.
     */
    virtual bool isAvailableBlocking() const;

    /**
     * Returns the wrapper class that is used to (de-)register for notifications about
     * the availability of the remote partner of this proxy.
     */
    virtual CommonAPI::ProxyStatusEvent& getProxyStatusEvent();

    /**
     * Returns the wrapper class that is used to access version information of the remote
     * partner of this proxy.
     */
    virtual CommonAPI::InterfaceVersionAttribute& getInterfaceVersionAttribute();

    virtual std::future<void> getCompletionFuture();

    /**
     * Calls InjectMapMatchedFeedbackData with Fire&Forget semantics.
     *
     * All const parameters are input parameters to this method.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void InjectMapMatchedFeedbackData(::v1::com::qualcomm::qti::location::LocationTypes::MapMatchingFeedbackDataT _mmfData, CommonAPI::CallStatus &_internalCallStatus);
    /**
     * Returns the wrapper class that provides access to the broadcast GnssCapabilities.
     */
    virtual GnssCapabilitiesEvent& getGnssCapabilitiesEvent() {
        return delegate_->getGnssCapabilitiesEvent();
    }
    /**
     * Returns the wrapper class that provides access to the broadcast GnssMeasurementReport.
     */
    virtual GnssMeasurementReportEvent& getGnssMeasurementReportEvent() {
        return delegate_->getGnssMeasurementReportEvent();
    }
    /**
     * Returns the wrapper class that provides access to the broadcast GnssLocationReport.
     */
    virtual GnssLocationReportEvent& getGnssLocationReportEvent() {
        return delegate_->getGnssLocationReportEvent();
    }
    /**
     * Returns the wrapper class that provides access to the broadcast GnssEngineLocationsReport.
     */
    virtual GnssEngineLocationsReportEvent& getGnssEngineLocationsReportEvent() {
        return delegate_->getGnssEngineLocationsReportEvent();
    }
    /**
     * Returns the wrapper class that provides access to the broadcast GnssSvReport.
     */
    virtual GnssSvReportEvent& getGnssSvReportEvent() {
        return delegate_->getGnssSvReportEvent();
    }
    /**
     * Returns the wrapper class that provides access to the broadcast GnssNmea.
     */
    virtual GnssNmeaEvent& getGnssNmeaEvent() {
        return delegate_->getGnssNmeaEvent();
    }
    /**
     * Returns the wrapper class that provides access to the broadcast EngineNmea.
     */
    virtual EngineNmeaEvent& getEngineNmeaEvent() {
        return delegate_->getEngineNmeaEvent();
    }
    /**
     * Returns the wrapper class that provides access to the broadcast GnssDataReport.
     */
    virtual GnssDataReportEvent& getGnssDataReportEvent() {
        return delegate_->getGnssDataReportEvent();
    }
    /**
     * Calls StartPositionSessionLocationReport with synchronous semantics.
     *
     * All const parameters are input parameters to this method.
     * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void StartPositionSessionLocationReport(uint32_t _intervalInMs, uint32_t _gnssReportCallbackMask, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::qualcomm::qti::location::LocationTypes::LocationStatusT &_status, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls StartPositionSessionLocationReport with asynchronous semantics.
     *
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> StartPositionSessionLocationReportAsync(const uint32_t &_intervalInMs, const uint32_t &_gnssReportCallbackMask, StartPositionSessionLocationReportAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls StartPositionSessionEngineSpecificLocation with synchronous semantics.
     *
     * All const parameters are input parameters to this method.
     * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void StartPositionSessionEngineSpecificLocation(uint32_t _intervalInMs, uint32_t _locReqEngMask, uint32_t _engReportCallbackMask, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::qualcomm::qti::location::LocationTypes::LocationStatusT &_status, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls StartPositionSessionEngineSpecificLocation with asynchronous semantics.
     *
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> StartPositionSessionEngineSpecificLocationAsync(const uint32_t &_intervalInMs, const uint32_t &_locReqEngMask, const uint32_t &_engReportCallbackMask, StartPositionSessionEngineSpecificLocationAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls StopPositionSession with synchronous semantics.
     *
     * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void StopPositionSession(CommonAPI::CallStatus &_internalCallStatus, ::v1::com::qualcomm::qti::location::LocationTypes::LocationStatusT &_status, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls StopPositionSession with asynchronous semantics.
     *
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> StopPositionSessionAsync(StopPositionSessionAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls DeleteAidingData with synchronous semantics.
     *
     * All const parameters are input parameters to this method.
     * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void DeleteAidingData(uint32_t _deleteMask, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::qualcomm::qti::location::LocationTypes::LocationStatusT &_status, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls DeleteAidingData with asynchronous semantics.
     *
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> DeleteAidingDataAsync(const uint32_t &_deleteMask, DeleteAidingDataAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls ConfigConstellations with synchronous semantics.
     *
     * All const parameters are input parameters to this method.
     * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void ConfigConstellations(std::vector< ::v1::com::qualcomm::qti::location::LocationTypes::GnssSvIdInfoT > _svList, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::qualcomm::qti::location::LocationTypes::LocationStatusT &_status, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls ConfigConstellations with asynchronous semantics.
     *
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> ConfigConstellationsAsync(const std::vector< ::v1::com::qualcomm::qti::location::LocationTypes::GnssSvIdInfoT > &_svList, ConfigConstellationsAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls GetLocationCapabilities with synchronous semantics.
     *
     * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void GetLocationCapabilities(CommonAPI::CallStatus &_internalCallStatus, uint32_t &_capabilitiesMask, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls GetLocationCapabilities with asynchronous semantics.
     *
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> GetLocationCapabilitiesAsync(GetLocationCapabilitiesAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);



 private:
    std::shared_ptr< LocationProxyBase> delegate_;
};

typedef LocationProxy<> LocationProxyDefault;


//
// LocationProxy Implementation
//
template <typename ... _AttributeExtensions>
LocationProxy<_AttributeExtensions...>::LocationProxy(std::shared_ptr<CommonAPI::Proxy> delegate):
        _AttributeExtensions(*(std::dynamic_pointer_cast< LocationProxyBase>(delegate)))...,
        delegate_(std::dynamic_pointer_cast< LocationProxyBase>(delegate)) {
}

template <typename ... _AttributeExtensions>
LocationProxy<_AttributeExtensions...>::~LocationProxy() {
}

template <typename ... _AttributeExtensions>
void LocationProxy<_AttributeExtensions...>::InjectMapMatchedFeedbackData(::v1::com::qualcomm::qti::location::LocationTypes::MapMatchingFeedbackDataT _mmfData, CommonAPI::CallStatus &_internalCallStatus) {
    delegate_->InjectMapMatchedFeedbackData(_mmfData, _internalCallStatus);
}
template <typename ... _AttributeExtensions>
void LocationProxy<_AttributeExtensions...>::StartPositionSessionLocationReport(uint32_t _intervalInMs, uint32_t _gnssReportCallbackMask, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::qualcomm::qti::location::LocationTypes::LocationStatusT &_status, const CommonAPI::CallInfo *_info) {
    delegate_->StartPositionSessionLocationReport(_intervalInMs, _gnssReportCallbackMask, _internalCallStatus, _status, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> LocationProxy<_AttributeExtensions...>::StartPositionSessionLocationReportAsync(const uint32_t &_intervalInMs, const uint32_t &_gnssReportCallbackMask, StartPositionSessionLocationReportAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->StartPositionSessionLocationReportAsync(_intervalInMs, _gnssReportCallbackMask, _callback, _info);
}
template <typename ... _AttributeExtensions>
void LocationProxy<_AttributeExtensions...>::StartPositionSessionEngineSpecificLocation(uint32_t _intervalInMs, uint32_t _locReqEngMask, uint32_t _engReportCallbackMask, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::qualcomm::qti::location::LocationTypes::LocationStatusT &_status, const CommonAPI::CallInfo *_info) {
    delegate_->StartPositionSessionEngineSpecificLocation(_intervalInMs, _locReqEngMask, _engReportCallbackMask, _internalCallStatus, _status, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> LocationProxy<_AttributeExtensions...>::StartPositionSessionEngineSpecificLocationAsync(const uint32_t &_intervalInMs, const uint32_t &_locReqEngMask, const uint32_t &_engReportCallbackMask, StartPositionSessionEngineSpecificLocationAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->StartPositionSessionEngineSpecificLocationAsync(_intervalInMs, _locReqEngMask, _engReportCallbackMask, _callback, _info);
}
template <typename ... _AttributeExtensions>
void LocationProxy<_AttributeExtensions...>::StopPositionSession(CommonAPI::CallStatus &_internalCallStatus, ::v1::com::qualcomm::qti::location::LocationTypes::LocationStatusT &_status, const CommonAPI::CallInfo *_info) {
    delegate_->StopPositionSession(_internalCallStatus, _status, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> LocationProxy<_AttributeExtensions...>::StopPositionSessionAsync(StopPositionSessionAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->StopPositionSessionAsync(_callback, _info);
}
template <typename ... _AttributeExtensions>
void LocationProxy<_AttributeExtensions...>::DeleteAidingData(uint32_t _deleteMask, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::qualcomm::qti::location::LocationTypes::LocationStatusT &_status, const CommonAPI::CallInfo *_info) {
    delegate_->DeleteAidingData(_deleteMask, _internalCallStatus, _status, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> LocationProxy<_AttributeExtensions...>::DeleteAidingDataAsync(const uint32_t &_deleteMask, DeleteAidingDataAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->DeleteAidingDataAsync(_deleteMask, _callback, _info);
}
template <typename ... _AttributeExtensions>
void LocationProxy<_AttributeExtensions...>::ConfigConstellations(std::vector< ::v1::com::qualcomm::qti::location::LocationTypes::GnssSvIdInfoT > _svList, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::qualcomm::qti::location::LocationTypes::LocationStatusT &_status, const CommonAPI::CallInfo *_info) {
    delegate_->ConfigConstellations(_svList, _internalCallStatus, _status, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> LocationProxy<_AttributeExtensions...>::ConfigConstellationsAsync(const std::vector< ::v1::com::qualcomm::qti::location::LocationTypes::GnssSvIdInfoT > &_svList, ConfigConstellationsAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->ConfigConstellationsAsync(_svList, _callback, _info);
}
template <typename ... _AttributeExtensions>
void LocationProxy<_AttributeExtensions...>::GetLocationCapabilities(CommonAPI::CallStatus &_internalCallStatus, uint32_t &_capabilitiesMask, const CommonAPI::CallInfo *_info) {
    delegate_->GetLocationCapabilities(_internalCallStatus, _capabilitiesMask, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> LocationProxy<_AttributeExtensions...>::GetLocationCapabilitiesAsync(GetLocationCapabilitiesAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->GetLocationCapabilitiesAsync(_callback, _info);
}

template <typename ... _AttributeExtensions>
const CommonAPI::Address &LocationProxy<_AttributeExtensions...>::getAddress() const {
    return delegate_->getAddress();
}

template <typename ... _AttributeExtensions>
bool LocationProxy<_AttributeExtensions...>::isAvailable() const {
    return delegate_->isAvailable();
}

template <typename ... _AttributeExtensions>
bool LocationProxy<_AttributeExtensions...>::isAvailableBlocking() const {
    return delegate_->isAvailableBlocking();
}

template <typename ... _AttributeExtensions>
CommonAPI::ProxyStatusEvent& LocationProxy<_AttributeExtensions...>::getProxyStatusEvent() {
    return delegate_->getProxyStatusEvent();
}

template <typename ... _AttributeExtensions>
CommonAPI::InterfaceVersionAttribute& LocationProxy<_AttributeExtensions...>::getInterfaceVersionAttribute() {
    return delegate_->getInterfaceVersionAttribute();
}


template <typename ... _AttributeExtensions>
std::future<void> LocationProxy<_AttributeExtensions...>::getCompletionFuture() {
    return delegate_->getCompletionFuture();
}

} // namespace location
} // namespace qti
} // namespace qualcomm
} // namespace com
} // namespace v1



// Compatibility
namespace v1_0 = v1;

#endif // V1_COM_QUALCOMM_QTI_LOCATION_Location_PROXY_HPP_
