/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.2.0.v202012010850.
* Used org.franca.core 0.13.1.201807231814.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_COM_QUALCOMM_QTI_LOCATION_Location_STUB_HPP_
#define V1_COM_QUALCOMM_QTI_LOCATION_Location_STUB_HPP_

#include <functional>
#include <sstream>



#include <v1/com/qualcomm/qti/location/LocationTypes.hpp>

#include <v1/com/qualcomm/qti/location/Location.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#define HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <cstdint>
#include <unordered_set>
#include <vector>


#include <CommonAPI/Stub.hpp>

#if defined (HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE)
#undef COMMONAPI_INTERNAL_COMPILATION
#undef HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

namespace v1 {
namespace com {
namespace qualcomm {
namespace qti {
namespace location {

/**
 * Receives messages from remote and handles all dispatching of deserialized calls
 * to a stub for the service Location. Also provides means to send broadcasts
 * and attribute-changed-notifications of observable attributes as defined by this service.
 * An application developer should not need to bother with this class.
 */
class LocationStubAdapter
    : public virtual CommonAPI::StubAdapter,
      public virtual Location {
 public:
    /**
    * Sends a broadcast event for GnssCapabilities. Should not be called directly.
    * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
    */
    virtual void fireGnssCapabilitiesEvent(const uint32_t &_capabilitiesMask) = 0;
    /**
    * Sends a broadcast event for GnssMeasurementReport. Should not be called directly.
    * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
    */
    virtual void fireGnssMeasurementReportEvent(const ::v1::com::qualcomm::qti::location::LocationTypes::GnssMeasurementsT &_gnssMeasurements) = 0;
    /**
    * Sends a broadcast event for GnssLocationReport. Should not be called directly.
    * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
    */
    virtual void fireGnssLocationReportEvent(const ::v1::com::qualcomm::qti::location::LocationTypes::LocationReportT &_locationReport) = 0;
    /**
    * Sends a broadcast event for GnssEngineLocationsReport. Should not be called directly.
    * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
    */
    virtual void fireGnssEngineLocationsReportEvent(const std::vector< ::v1::com::qualcomm::qti::location::LocationTypes::LocationReportT > &_locationReport) = 0;
    /**
    * Sends a broadcast event for GnssSvReport. Should not be called directly.
    * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
    */
    virtual void fireGnssSvReportEvent(const std::vector< ::v1::com::qualcomm::qti::location::LocationTypes::GnssSvDataT > &_gnssSv) = 0;
    /**
    * Sends a broadcast event for GnssNmea. Should not be called directly.
    * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
    */
    virtual void fireGnssNmeaEvent(const uint64_t &_timestamp, const std::string &_nmea) = 0;
    /**
    * Sends a broadcast event for EngineNmea. Should not be called directly.
    * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
    */
    virtual void fireEngineNmeaEvent(const ::v1::com::qualcomm::qti::location::LocationTypes::LocOutputEngineTypeT &_engType, const uint64_t &_timestamp, const std::string &_nmea) = 0;
    /**
    * Sends a broadcast event for GnssDataReport. Should not be called directly.
    * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
    */
    virtual void fireGnssDataReportEvent(const ::v1::com::qualcomm::qti::location::LocationTypes::GnssDataT &_gnssData) = 0;


    virtual void deactivateManagedInstances() = 0;


protected:
    /**
     * Defines properties for storing the ClientIds of clients / proxies that have
     * subscribed to the selective broadcasts
     */

};

/**
 * Defines the necessary callbacks to handle remote set events related to the attributes
 * defined in the IDL description for Location.
 * For each attribute two callbacks are defined:
 * - a verification callback that allows to verify the requested value and to prevent setting
 *   e.g. an invalid value ("onRemoteSet<AttributeName>").
 * - an action callback to do local work after the attribute value has been changed
 *   ("onRemote<AttributeName>Changed").
 *
 * This class and the one below are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class LocationStubRemoteEvent
{
public:
    virtual ~LocationStubRemoteEvent() { }

};

/**
 * Defines the interface that must be implemented by any class that should provide
 * the service Location to remote clients.
 * This class and the one above are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class LocationStub
    : public virtual CommonAPI::Stub<LocationStubAdapter, LocationStubRemoteEvent>
{
public:
    typedef std::function<void (::v1::com::qualcomm::qti::location::LocationTypes::LocationStatusT _status)> StartPositionSessionLocationReportReply_t;
    typedef std::function<void (::v1::com::qualcomm::qti::location::LocationTypes::LocationStatusT _status)> StartPositionSessionEngineSpecificLocationReply_t;
    typedef std::function<void (::v1::com::qualcomm::qti::location::LocationTypes::LocationStatusT _status)> StopPositionSessionReply_t;
    typedef std::function<void (::v1::com::qualcomm::qti::location::LocationTypes::LocationStatusT _status)> DeleteAidingDataReply_t;
    typedef std::function<void (::v1::com::qualcomm::qti::location::LocationTypes::LocationStatusT _status)> ConfigConstellationsReply_t;
    typedef std::function<void (uint32_t _capabilitiesMask)> GetLocationCapabilitiesReply_t;

    virtual ~LocationStub() {}
    void lockInterfaceVersionAttribute(bool _lockAccess) { static_cast<void>(_lockAccess); }
    bool hasElement(const uint32_t _id) const {
        return (_id < 15);
    }
    virtual const CommonAPI::Version& getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> _client) = 0;

    /// This is the method that will be called on remote calls on the method InjectMapMatchedFeedbackData.
    virtual void InjectMapMatchedFeedbackData(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::com::qualcomm::qti::location::LocationTypes::MapMatchingFeedbackDataT _mmfData) = 0;
    /// Sends a broadcast event for GnssCapabilities.
    virtual void fireGnssCapabilitiesEvent(const uint32_t &_capabilitiesMask) {
        auto stubAdapter = CommonAPI::Stub<LocationStubAdapter, LocationStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->fireGnssCapabilitiesEvent(_capabilitiesMask);
    }
    /// Sends a broadcast event for GnssMeasurementReport.
    virtual void fireGnssMeasurementReportEvent(const ::v1::com::qualcomm::qti::location::LocationTypes::GnssMeasurementsT &_gnssMeasurements) {
        auto stubAdapter = CommonAPI::Stub<LocationStubAdapter, LocationStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->fireGnssMeasurementReportEvent(_gnssMeasurements);
    }
    /// Sends a broadcast event for GnssLocationReport.
    virtual void fireGnssLocationReportEvent(const ::v1::com::qualcomm::qti::location::LocationTypes::LocationReportT &_locationReport) {
        auto stubAdapter = CommonAPI::Stub<LocationStubAdapter, LocationStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->fireGnssLocationReportEvent(_locationReport);
    }
    /// Sends a broadcast event for GnssEngineLocationsReport.
    virtual void fireGnssEngineLocationsReportEvent(const std::vector< ::v1::com::qualcomm::qti::location::LocationTypes::LocationReportT > &_locationReport) {
        auto stubAdapter = CommonAPI::Stub<LocationStubAdapter, LocationStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->fireGnssEngineLocationsReportEvent(_locationReport);
    }
    /// Sends a broadcast event for GnssSvReport.
    virtual void fireGnssSvReportEvent(const std::vector< ::v1::com::qualcomm::qti::location::LocationTypes::GnssSvDataT > &_gnssSv) {
        auto stubAdapter = CommonAPI::Stub<LocationStubAdapter, LocationStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->fireGnssSvReportEvent(_gnssSv);
    }
    /// Sends a broadcast event for GnssNmea.
    virtual void fireGnssNmeaEvent(const uint64_t &_timestamp, const std::string &_nmea) {
        auto stubAdapter = CommonAPI::Stub<LocationStubAdapter, LocationStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->fireGnssNmeaEvent(_timestamp, _nmea);
    }
    /// Sends a broadcast event for EngineNmea.
    virtual void fireEngineNmeaEvent(const ::v1::com::qualcomm::qti::location::LocationTypes::LocOutputEngineTypeT &_engType, const uint64_t &_timestamp, const std::string &_nmea) {
        auto stubAdapter = CommonAPI::Stub<LocationStubAdapter, LocationStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->fireEngineNmeaEvent(_engType, _timestamp, _nmea);
    }
    /// Sends a broadcast event for GnssDataReport.
    virtual void fireGnssDataReportEvent(const ::v1::com::qualcomm::qti::location::LocationTypes::GnssDataT &_gnssData) {
        auto stubAdapter = CommonAPI::Stub<LocationStubAdapter, LocationStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->fireGnssDataReportEvent(_gnssData);
    }
    /// This is the method that will be called on remote calls on the method StartPositionSessionLocationReport.
    virtual void StartPositionSessionLocationReport(const std::shared_ptr<CommonAPI::ClientId> _client, uint32_t _intervalInMs, uint32_t _gnssReportCallbackMask, StartPositionSessionLocationReportReply_t _reply) = 0;
    /// This is the method that will be called on remote calls on the method StartPositionSessionEngineSpecificLocation.
    virtual void StartPositionSessionEngineSpecificLocation(const std::shared_ptr<CommonAPI::ClientId> _client, uint32_t _intervalInMs, uint32_t _locReqEngMask, uint32_t _engReportCallbackMask, StartPositionSessionEngineSpecificLocationReply_t _reply) = 0;
    /// This is the method that will be called on remote calls on the method StopPositionSession.
    virtual void StopPositionSession(const std::shared_ptr<CommonAPI::ClientId> _client, StopPositionSessionReply_t _reply) = 0;
    /// This is the method that will be called on remote calls on the method DeleteAidingData.
    virtual void DeleteAidingData(const std::shared_ptr<CommonAPI::ClientId> _client, uint32_t _deleteMask, DeleteAidingDataReply_t _reply) = 0;
    /// This is the method that will be called on remote calls on the method ConfigConstellations.
    virtual void ConfigConstellations(const std::shared_ptr<CommonAPI::ClientId> _client, std::vector< ::v1::com::qualcomm::qti::location::LocationTypes::GnssSvIdInfoT > _svList, ConfigConstellationsReply_t _reply) = 0;
    /// This is the method that will be called on remote calls on the method GetLocationCapabilities.
    virtual void GetLocationCapabilities(const std::shared_ptr<CommonAPI::ClientId> _client, GetLocationCapabilitiesReply_t _reply) = 0;


    using CommonAPI::Stub<LocationStubAdapter, LocationStubRemoteEvent>::initStubAdapter;
    typedef CommonAPI::Stub<LocationStubAdapter, LocationStubRemoteEvent>::StubAdapterType StubAdapterType;
    typedef CommonAPI::Stub<LocationStubAdapter, LocationStubRemoteEvent>::RemoteEventHandlerType RemoteEventHandlerType;
    typedef LocationStubRemoteEvent RemoteEventType;
    typedef Location StubInterface;
    virtual LocationStubRemoteEvent* initStubAdapter(const std::shared_ptr<LocationStubAdapter> &_stubAdapter){
        CommonAPI::Stub<LocationStubAdapter, LocationStubRemoteEvent>::stubAdapter_ = _stubAdapter;
        return mspLocIdlAPIStubRemoteEvent.get();
    }
private:
    std::shared_ptr<LocationStubRemoteEvent> mspLocIdlAPIStubRemoteEvent;
};

} // namespace location
} // namespace qti
} // namespace qualcomm
} // namespace com
} // namespace v1


// Compatibility
namespace v1_0 = v1;

#endif // V1_COM_QUALCOMM_QTI_LOCATION_Location_STUB_HPP_
