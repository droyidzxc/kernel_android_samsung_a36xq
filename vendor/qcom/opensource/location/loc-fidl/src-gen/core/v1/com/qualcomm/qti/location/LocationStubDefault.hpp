/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.2.0.v202012010850.
* Used org.franca.core 0.13.1.201807231814.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V1_COM_QUALCOMM_QTI_LOCATION_Location_STUB_DEFAULT_HPP_
#define V1_COM_QUALCOMM_QTI_LOCATION_Location_STUB_DEFAULT_HPP_


#include <CommonAPI/Export.hpp>

#include <v1/com/qualcomm/qti/location/LocationStub.hpp>
#include <cassert>
#include <sstream>

# if defined(_MSC_VER)
#  if _MSC_VER >= 1300
/*
 * Diamond inheritance is used for the CommonAPI::Proxy base class.
 * The Microsoft compiler put warning (C4250) using a desired c++ feature: "Delegating to a sister class"
 * A powerful technique that arises from using virtual inheritance is to delegate a method from a class in another class
 * by using a common abstract base class. This is also called cross delegation.
 */
#    pragma warning( disable : 4250 )
#  endif
# endif

namespace v1 {
namespace com {
namespace qualcomm {
namespace qti {
namespace location {

/**
 * Provides a default implementation for LocationStubRemoteEvent and
 * LocationStub. Method callbacks have an empty implementation,
 * remote set calls on attributes will always change the value of the attribute
 * to the one received.
 *
 * Override this stub if you only want to provide a subset of the functionality
 * that would be defined for this service, and/or if you do not need any non-default
 * behaviour.
 */
class COMMONAPI_EXPORT_CLASS_EXPLICIT LocationStubDefault
    : public virtual LocationStub {
public:
    COMMONAPI_EXPORT LocationStubDefault()
        : remoteEventHandler_(this),
          interfaceVersion_(Location::getInterfaceVersion()) {
    }

    COMMONAPI_EXPORT const CommonAPI::Version& getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> _client) {
        (void)_client;
        return interfaceVersion_;
    }

    COMMONAPI_EXPORT LocationStubRemoteEvent* initStubAdapter(const std::shared_ptr< LocationStubAdapter> &_adapter) {
        CommonAPI::Stub<LocationStubAdapter, LocationStubRemoteEvent>::stubAdapter_ = _adapter;
        return &remoteEventHandler_;
    }

    COMMONAPI_EXPORT virtual void InjectMapMatchedFeedbackData(const std::shared_ptr<CommonAPI::ClientId> _client, ::v1::com::qualcomm::qti::location::LocationTypes::MapMatchingFeedbackDataT _mmfData) {
        (void)_client;
        (void)_mmfData;
    }
    COMMONAPI_EXPORT virtual void fireGnssCapabilitiesEvent(const uint32_t &_capabilitiesMask) {
        LocationStub::fireGnssCapabilitiesEvent(_capabilitiesMask);
    }
    COMMONAPI_EXPORT virtual void fireGnssMeasurementReportEvent(const ::v1::com::qualcomm::qti::location::LocationTypes::GnssMeasurementsT &_gnssMeasurements) {
        LocationStub::fireGnssMeasurementReportEvent(_gnssMeasurements);
    }
    COMMONAPI_EXPORT virtual void fireGnssLocationReportEvent(const ::v1::com::qualcomm::qti::location::LocationTypes::LocationReportT &_locationReport) {
        LocationStub::fireGnssLocationReportEvent(_locationReport);
    }
    COMMONAPI_EXPORT virtual void fireGnssEngineLocationsReportEvent(const std::vector< ::v1::com::qualcomm::qti::location::LocationTypes::LocationReportT > &_locationReport) {
        LocationStub::fireGnssEngineLocationsReportEvent(_locationReport);
    }
    COMMONAPI_EXPORT virtual void fireGnssSvReportEvent(const std::vector< ::v1::com::qualcomm::qti::location::LocationTypes::GnssSvDataT > &_gnssSv) {
        LocationStub::fireGnssSvReportEvent(_gnssSv);
    }
    COMMONAPI_EXPORT virtual void fireGnssNmeaEvent(const uint64_t &_timestamp, const std::string &_nmea) {
        LocationStub::fireGnssNmeaEvent(_timestamp, _nmea);
    }
    COMMONAPI_EXPORT virtual void fireEngineNmeaEvent(const ::v1::com::qualcomm::qti::location::LocationTypes::LocOutputEngineTypeT &_engType, const uint64_t &_timestamp, const std::string &_nmea) {
        if (!_engType.validate()) {
            return;
        }
        LocationStub::fireEngineNmeaEvent(_engType, _timestamp, _nmea);
    }
    COMMONAPI_EXPORT virtual void fireGnssDataReportEvent(const ::v1::com::qualcomm::qti::location::LocationTypes::GnssDataT &_gnssData) {
        LocationStub::fireGnssDataReportEvent(_gnssData);
    }
    COMMONAPI_EXPORT virtual void StartPositionSessionLocationReport(const std::shared_ptr<CommonAPI::ClientId> _client, uint32_t _intervalInMs, uint32_t _gnssReportCallbackMask, StartPositionSessionLocationReportReply_t _reply) {
        (void)_client;
        (void)_intervalInMs;
        (void)_gnssReportCallbackMask;
        ::v1::com::qualcomm::qti::location::LocationTypes::LocationStatusT status = ::v1::com::qualcomm::qti::location::LocationTypes::LocationStatusT::LOCATION_STATUS_T_UNKNOWN;
        if (!status.validate()) {
            return;
        }
        _reply(status);
    }
    COMMONAPI_EXPORT virtual void StartPositionSessionEngineSpecificLocation(const std::shared_ptr<CommonAPI::ClientId> _client, uint32_t _intervalInMs, uint32_t _locReqEngMask, uint32_t _engReportCallbackMask, StartPositionSessionEngineSpecificLocationReply_t _reply) {
        (void)_client;
        (void)_intervalInMs;
        (void)_locReqEngMask;
        (void)_engReportCallbackMask;
        ::v1::com::qualcomm::qti::location::LocationTypes::LocationStatusT status = ::v1::com::qualcomm::qti::location::LocationTypes::LocationStatusT::LOCATION_STATUS_T_UNKNOWN;
        if (!status.validate()) {
            return;
        }
        _reply(status);
    }
    COMMONAPI_EXPORT virtual void StopPositionSession(const std::shared_ptr<CommonAPI::ClientId> _client, StopPositionSessionReply_t _reply) {
        (void)_client;
        ::v1::com::qualcomm::qti::location::LocationTypes::LocationStatusT status = ::v1::com::qualcomm::qti::location::LocationTypes::LocationStatusT::LOCATION_STATUS_T_UNKNOWN;
        if (!status.validate()) {
            return;
        }
        _reply(status);
    }
    COMMONAPI_EXPORT virtual void DeleteAidingData(const std::shared_ptr<CommonAPI::ClientId> _client, uint32_t _deleteMask, DeleteAidingDataReply_t _reply) {
        (void)_client;
        (void)_deleteMask;
        ::v1::com::qualcomm::qti::location::LocationTypes::LocationStatusT status = ::v1::com::qualcomm::qti::location::LocationTypes::LocationStatusT::LOCATION_STATUS_T_UNKNOWN;
        if (!status.validate()) {
            return;
        }
        _reply(status);
    }
    COMMONAPI_EXPORT virtual void ConfigConstellations(const std::shared_ptr<CommonAPI::ClientId> _client, std::vector< ::v1::com::qualcomm::qti::location::LocationTypes::GnssSvIdInfoT > _svList, ConfigConstellationsReply_t _reply) {
        (void)_client;
        (void)_svList;
        ::v1::com::qualcomm::qti::location::LocationTypes::LocationStatusT status = ::v1::com::qualcomm::qti::location::LocationTypes::LocationStatusT::LOCATION_STATUS_T_UNKNOWN;
        if (!status.validate()) {
            return;
        }
        _reply(status);
    }
    COMMONAPI_EXPORT virtual void GetLocationCapabilities(const std::shared_ptr<CommonAPI::ClientId> _client, GetLocationCapabilitiesReply_t _reply) {
        (void)_client;
        uint32_t capabilitiesMask = 0ul;
        _reply(capabilitiesMask);
    }


protected:
    class COMMONAPI_EXPORT_CLASS_EXPLICIT RemoteEventHandler: public virtual LocationStubRemoteEvent {
    public:
        COMMONAPI_EXPORT RemoteEventHandler(LocationStubDefault *_defaultStub)
            : 
              defaultStub_(_defaultStub) {
        }


    private:
        LocationStubDefault *defaultStub_;
    };
protected:
    LocationStubDefault::RemoteEventHandler remoteEventHandler_;

private:


    CommonAPI::Version interfaceVersion_;
};

} // namespace location
} // namespace qti
} // namespace qualcomm
} // namespace com
} // namespace v1


// Compatibility
namespace v1_0 = v1;

#endif // V1_COM_QUALCOMM_QTI_LOCATION_Location_STUB_DEFAULT
