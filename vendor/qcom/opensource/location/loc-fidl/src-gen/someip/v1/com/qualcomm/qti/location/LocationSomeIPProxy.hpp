/*
 * This file was generated by the CommonAPI Generators.
 * Used org.genivi.commonapi.someip 3.2.0.v202012010944.
 * Used org.franca.core 0.13.1.201807231814.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
 * If a copy of the MPL was not distributed with this file, You can obtain one at
 * http://mozilla.org/MPL/2.0/.
 */
#ifndef V1_COM_QUALCOMM_QTI_LOCATION_LOCATION_SOMEIP_PROXY_HPP_
#define V1_COM_QUALCOMM_QTI_LOCATION_LOCATION_SOMEIP_PROXY_HPP_

#include <v1/com/qualcomm/qti/location/LocationProxyBase.hpp>
#include <v1/com/qualcomm/qti/location/LocationSomeIPDeployment.hpp>
#include <v1/com/qualcomm/qti/location/LocationTypesSomeIPDeployment.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#define HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

#include <CommonAPI/SomeIP/Factory.hpp>
#include <CommonAPI/SomeIP/Proxy.hpp>
#include <CommonAPI/SomeIP/Types.hpp>
#include <CommonAPI/SomeIP/Event.hpp>

#if defined (HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE)
#undef COMMONAPI_INTERNAL_COMPILATION
#undef HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

#include <string>

# if defined(_MSC_VER)
#  if _MSC_VER >= 1300
/*
 * Diamond inheritance is used for the CommonAPI::Proxy base class.
 * The Microsoft compiler put warning (C4250) using a desired c++ feature: "Delegating to a sister class"
 * A powerful technique that arises from using virtual inheritance is to delegate a method from a class in another class
 * by using a common abstract base class. This is also called cross delegation.
 */
#    pragma warning( disable : 4250 )
#  endif
# endif

namespace v1 {
namespace com {
namespace qualcomm {
namespace qti {
namespace location {

class LocationSomeIPProxy
    : virtual public LocationProxyBase,
      virtual public CommonAPI::SomeIP::Proxy {
public:
    LocationSomeIPProxy(
        const CommonAPI::SomeIP::Address &_address,
        const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection);

    virtual ~LocationSomeIPProxy();

    virtual GnssCapabilitiesEvent& getGnssCapabilitiesEvent();

    virtual GnssMeasurementReportEvent& getGnssMeasurementReportEvent();

    virtual GnssLocationReportEvent& getGnssLocationReportEvent();

    virtual GnssEngineLocationsReportEvent& getGnssEngineLocationsReportEvent();

    virtual GnssSvReportEvent& getGnssSvReportEvent();

    virtual GnssNmeaEvent& getGnssNmeaEvent();

    virtual EngineNmeaEvent& getEngineNmeaEvent();

    virtual GnssDataReportEvent& getGnssDataReportEvent();

    virtual void InjectMapMatchedFeedbackData(::v1::com::qualcomm::qti::location::LocationTypes::MapMatchingFeedbackDataT _mmfData, CommonAPI::CallStatus &_internalCallStatus);

    virtual void StartPositionSessionLocationReport(uint32_t _intervalInMs, uint32_t _gnssReportCallbackMask, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::qualcomm::qti::location::LocationTypes::LocationStatusT &_status, const CommonAPI::CallInfo *_info);

    virtual std::future<CommonAPI::CallStatus> StartPositionSessionLocationReportAsync(const uint32_t &_intervalInMs, const uint32_t &_gnssReportCallbackMask, StartPositionSessionLocationReportAsyncCallback _callback, const CommonAPI::CallInfo *_info);

    virtual void StartPositionSessionEngineSpecificLocation(uint32_t _intervalInMs, uint32_t _locReqEngMask, uint32_t _engReportCallbackMask, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::qualcomm::qti::location::LocationTypes::LocationStatusT &_status, const CommonAPI::CallInfo *_info);

    virtual std::future<CommonAPI::CallStatus> StartPositionSessionEngineSpecificLocationAsync(const uint32_t &_intervalInMs, const uint32_t &_locReqEngMask, const uint32_t &_engReportCallbackMask, StartPositionSessionEngineSpecificLocationAsyncCallback _callback, const CommonAPI::CallInfo *_info);

    virtual void StopPositionSession(CommonAPI::CallStatus &_internalCallStatus, ::v1::com::qualcomm::qti::location::LocationTypes::LocationStatusT &_status, const CommonAPI::CallInfo *_info);

    virtual std::future<CommonAPI::CallStatus> StopPositionSessionAsync(StopPositionSessionAsyncCallback _callback, const CommonAPI::CallInfo *_info);

    virtual void DeleteAidingData(uint32_t _deleteMask, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::qualcomm::qti::location::LocationTypes::LocationStatusT &_status, const CommonAPI::CallInfo *_info);

    virtual std::future<CommonAPI::CallStatus> DeleteAidingDataAsync(const uint32_t &_deleteMask, DeleteAidingDataAsyncCallback _callback, const CommonAPI::CallInfo *_info);

    virtual void ConfigConstellations(std::vector< ::v1::com::qualcomm::qti::location::LocationTypes::GnssSvIdInfoT > _svList, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::qualcomm::qti::location::LocationTypes::LocationStatusT &_status, const CommonAPI::CallInfo *_info);

    virtual std::future<CommonAPI::CallStatus> ConfigConstellationsAsync(const std::vector< ::v1::com::qualcomm::qti::location::LocationTypes::GnssSvIdInfoT > &_svList, ConfigConstellationsAsyncCallback _callback, const CommonAPI::CallInfo *_info);

    virtual void GetLocationCapabilities(CommonAPI::CallStatus &_internalCallStatus, uint32_t &_capabilitiesMask, const CommonAPI::CallInfo *_info);

    virtual std::future<CommonAPI::CallStatus> GetLocationCapabilitiesAsync(GetLocationCapabilitiesAsyncCallback _callback, const CommonAPI::CallInfo *_info);

    virtual void getOwnVersion(uint16_t &_major, uint16_t &_minor) const;

    virtual std::future<void> getCompletionFuture();

private:
    CommonAPI::SomeIP::Event<GnssCapabilitiesEvent, CommonAPI::Deployable< uint32_t, CommonAPI::SomeIP::IntegerDeployment<uint32_t> >> gnssCapabilities_;
    CommonAPI::SomeIP::Event<GnssMeasurementReportEvent, CommonAPI::Deployable< ::v1::com::qualcomm::qti::location::LocationTypes::GnssMeasurementsT, ::v1::com::qualcomm::qti::location::LocationTypes_::GnssMeasurementsTDeployment_t >> gnssMeasurementReport_;
    CommonAPI::SomeIP::Event<GnssLocationReportEvent, CommonAPI::Deployable< ::v1::com::qualcomm::qti::location::LocationTypes::LocationReportT, ::v1::com::qualcomm::qti::location::LocationTypes_::LocationReportTDeployment_t >> gnssLocationReport_;
    CommonAPI::SomeIP::Event<GnssEngineLocationsReportEvent, CommonAPI::Deployable< std::vector< ::v1::com::qualcomm::qti::location::LocationTypes::LocationReportT >, CommonAPI::SomeIP::ArrayDeployment< ::v1::com::qualcomm::qti::location::LocationTypes_::LocationReportTDeployment_t > >> gnssEngineLocationsReport_;
    CommonAPI::SomeIP::Event<GnssSvReportEvent, CommonAPI::Deployable< std::vector< ::v1::com::qualcomm::qti::location::LocationTypes::GnssSvDataT >, CommonAPI::SomeIP::ArrayDeployment< ::v1::com::qualcomm::qti::location::LocationTypes_::GnssSvDataTDeployment_t > >> gnssSvReport_;
    CommonAPI::SomeIP::Event<GnssNmeaEvent, CommonAPI::Deployable< uint64_t, CommonAPI::SomeIP::IntegerDeployment<uint64_t> >, CommonAPI::Deployable< std::string, CommonAPI::SomeIP::StringDeployment >> gnssNmea_;
    CommonAPI::SomeIP::Event<EngineNmeaEvent, CommonAPI::Deployable< ::v1::com::qualcomm::qti::location::LocationTypes::LocOutputEngineTypeT, ::v1::com::qualcomm::qti::location::LocationTypes_::LocOutputEngineTypeTDeployment_t >, CommonAPI::Deployable< uint64_t, CommonAPI::SomeIP::IntegerDeployment<uint64_t> >, CommonAPI::Deployable< std::string, CommonAPI::SomeIP::StringDeployment >> engineNmea_;
    CommonAPI::SomeIP::Event<GnssDataReportEvent, CommonAPI::Deployable< ::v1::com::qualcomm::qti::location::LocationTypes::GnssDataT, ::v1::com::qualcomm::qti::location::LocationTypes_::GnssDataTDeployment_t >> gnssDataReport_;

    std::promise<void> completed_;
};

} // namespace location
} // namespace qti
} // namespace qualcomm
} // namespace com
} // namespace v1

#endif // V1_COM_QUALCOMM_QTI_LOCATION_Location_SOMEIP_PROXY_HPP_
