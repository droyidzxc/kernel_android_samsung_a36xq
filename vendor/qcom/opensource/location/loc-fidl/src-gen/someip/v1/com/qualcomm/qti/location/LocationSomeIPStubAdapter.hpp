/*
 * This file was generated by the CommonAPI Generators.
 * Used org.genivi.commonapi.someip 3.2.0.v202012010944.
 * Used org.franca.core 0.13.1.201807231814.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
 * If a copy of the MPL was not distributed with this file, You can obtain one at
 * http://mozilla.org/MPL/2.0/.
 */
#ifndef V1_COM_QUALCOMM_QTI_LOCATION_LOCATION_SOMEIP_STUB_ADAPTER_HPP_
#define V1_COM_QUALCOMM_QTI_LOCATION_LOCATION_SOMEIP_STUB_ADAPTER_HPP_

#include <v1/com/qualcomm/qti/location/LocationStub.hpp>
#include <v1/com/qualcomm/qti/location/LocationSomeIPDeployment.hpp>
#include <v1/com/qualcomm/qti/location/LocationTypesSomeIPDeployment.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#define HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

#include <CommonAPI/SomeIP/AddressTranslator.hpp>
#include <CommonAPI/SomeIP/StubAdapterHelper.hpp>
#include <CommonAPI/SomeIP/StubAdapter.hpp>
#include <CommonAPI/SomeIP/Factory.hpp>
#include <CommonAPI/SomeIP/Types.hpp>
#include <CommonAPI/SomeIP/Constants.hpp>

#if defined (HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE)
#undef COMMONAPI_INTERNAL_COMPILATION
#undef HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

namespace v1 {
namespace com {
namespace qualcomm {
namespace qti {
namespace location {

template <typename _Stub = ::v1::com::qualcomm::qti::location::LocationStub, typename... _Stubs>
class LocationSomeIPStubAdapterInternal
    : public virtual LocationStubAdapter,
      public CommonAPI::SomeIP::StubAdapterHelper< _Stub, _Stubs...>,
      public std::enable_shared_from_this< LocationSomeIPStubAdapterInternal<_Stub, _Stubs...>>
{
public:
    typedef CommonAPI::SomeIP::StubAdapterHelper< _Stub, _Stubs...> LocationSomeIPStubAdapterHelper;

    ~LocationSomeIPStubAdapterInternal() {
        deactivateManagedInstances();
        LocationSomeIPStubAdapterHelper::deinit();
    }

    void fireGnssCapabilitiesEvent(const uint32_t &_capabilitiesMask);

    void fireGnssMeasurementReportEvent(const ::v1::com::qualcomm::qti::location::LocationTypes::GnssMeasurementsT &_gnssMeasurements);

    void fireGnssLocationReportEvent(const ::v1::com::qualcomm::qti::location::LocationTypes::LocationReportT &_locationReport);

    void fireGnssEngineLocationsReportEvent(const std::vector< ::v1::com::qualcomm::qti::location::LocationTypes::LocationReportT > &_locationReport);

    void fireGnssSvReportEvent(const std::vector< ::v1::com::qualcomm::qti::location::LocationTypes::GnssSvDataT > &_gnssSv);

    void fireGnssNmeaEvent(const uint64_t &_timestamp, const std::string &_nmea);

    void fireEngineNmeaEvent(const ::v1::com::qualcomm::qti::location::LocationTypes::LocOutputEngineTypeT &_engType, const uint64_t &_timestamp, const std::string &_nmea);

    void fireGnssDataReportEvent(const ::v1::com::qualcomm::qti::location::LocationTypes::GnssDataT &_gnssData);

    void deactivateManagedInstances() {}
    
    CommonAPI::SomeIP::GetAttributeStubDispatcher<
        ::v1::com::qualcomm::qti::location::LocationStub,
        CommonAPI::Version
    > getLocationInterfaceVersionStubDispatcher;

    CommonAPI::SomeIP::MethodStubDispatcher<
        ::v1::com::qualcomm::qti::location::LocationStub,
        std::tuple< ::v1::com::qualcomm::qti::location::LocationTypes::MapMatchingFeedbackDataT>,
        std::tuple< ::v1::com::qualcomm::qti::location::LocationTypes_::MapMatchingFeedbackDataTDeployment_t>
    > injectMapMatchedFeedbackDataStubDispatcher;
    
    CommonAPI::SomeIP::MethodWithReplyStubDispatcher<
        ::v1::com::qualcomm::qti::location::LocationStub,
        std::tuple< uint32_t, uint32_t>,
        std::tuple< ::v1::com::qualcomm::qti::location::LocationTypes::LocationStatusT>,
        std::tuple< CommonAPI::SomeIP::IntegerDeployment<uint32_t>, CommonAPI::SomeIP::IntegerDeployment<uint32_t>>,
        std::tuple< ::v1::com::qualcomm::qti::location::LocationTypes_::LocationStatusTDeployment_t>
    > startPositionSessionLocationReportStubDispatcher;
    
    CommonAPI::SomeIP::MethodWithReplyStubDispatcher<
        ::v1::com::qualcomm::qti::location::LocationStub,
        std::tuple< uint32_t, uint32_t, uint32_t>,
        std::tuple< ::v1::com::qualcomm::qti::location::LocationTypes::LocationStatusT>,
        std::tuple< CommonAPI::SomeIP::IntegerDeployment<uint32_t>, CommonAPI::SomeIP::IntegerDeployment<uint32_t>, CommonAPI::SomeIP::IntegerDeployment<uint32_t>>,
        std::tuple< ::v1::com::qualcomm::qti::location::LocationTypes_::LocationStatusTDeployment_t>
    > startPositionSessionEngineSpecificLocationStubDispatcher;
    
    CommonAPI::SomeIP::MethodWithReplyStubDispatcher<
        ::v1::com::qualcomm::qti::location::LocationStub,
        std::tuple< >,
        std::tuple< ::v1::com::qualcomm::qti::location::LocationTypes::LocationStatusT>,
        std::tuple< >,
        std::tuple< ::v1::com::qualcomm::qti::location::LocationTypes_::LocationStatusTDeployment_t>
    > stopPositionSessionStubDispatcher;
    
    CommonAPI::SomeIP::MethodWithReplyStubDispatcher<
        ::v1::com::qualcomm::qti::location::LocationStub,
        std::tuple< uint32_t>,
        std::tuple< ::v1::com::qualcomm::qti::location::LocationTypes::LocationStatusT>,
        std::tuple< CommonAPI::SomeIP::IntegerDeployment<uint32_t>>,
        std::tuple< ::v1::com::qualcomm::qti::location::LocationTypes_::LocationStatusTDeployment_t>
    > deleteAidingDataStubDispatcher;
    
    CommonAPI::SomeIP::MethodWithReplyStubDispatcher<
        ::v1::com::qualcomm::qti::location::LocationStub,
        std::tuple< std::vector< ::v1::com::qualcomm::qti::location::LocationTypes::GnssSvIdInfoT >>,
        std::tuple< ::v1::com::qualcomm::qti::location::LocationTypes::LocationStatusT>,
        std::tuple< CommonAPI::SomeIP::ArrayDeployment< ::v1::com::qualcomm::qti::location::LocationTypes_::GnssSvIdInfoTDeployment_t >>,
        std::tuple< ::v1::com::qualcomm::qti::location::LocationTypes_::LocationStatusTDeployment_t>
    > configConstellationsStubDispatcher;
    
    CommonAPI::SomeIP::MethodWithReplyStubDispatcher<
        ::v1::com::qualcomm::qti::location::LocationStub,
        std::tuple< >,
        std::tuple< uint32_t>,
        std::tuple< >,
        std::tuple< CommonAPI::SomeIP::IntegerDeployment<uint32_t>>
    > getLocationCapabilitiesStubDispatcher;
    
    LocationSomeIPStubAdapterInternal(
        const CommonAPI::SomeIP::Address &_address,
        const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection,
        const std::shared_ptr<CommonAPI::StubBase> &_stub):
        CommonAPI::SomeIP::StubAdapter(_address, _connection),
        LocationSomeIPStubAdapterHelper(
            _address,
            _connection,
            std::dynamic_pointer_cast< LocationStub>(_stub)),
        getLocationInterfaceVersionStubDispatcher(&LocationStub::lockInterfaceVersionAttribute, &LocationStub::getInterfaceVersion, false, true),
        injectMapMatchedFeedbackDataStubDispatcher(
            &LocationStub::InjectMapMatchedFeedbackData,
            false,
            _stub->hasElement(0),
            std::make_tuple(static_cast< ::v1::com::qualcomm::qti::location::LocationTypes_::MapMatchingFeedbackDataTDeployment_t* >(nullptr)))
        
        ,
        startPositionSessionLocationReportStubDispatcher(
            &LocationStub::StartPositionSessionLocationReport,
            false,
            _stub->hasElement(9),
            std::make_tuple(static_cast< CommonAPI::SomeIP::IntegerDeployment<uint32_t>* >(nullptr), static_cast< CommonAPI::SomeIP::IntegerDeployment<uint32_t>* >(nullptr)),
            std::make_tuple(static_cast< ::v1::com::qualcomm::qti::location::LocationTypes_::LocationStatusTDeployment_t* >(nullptr)))
        
        ,
        startPositionSessionEngineSpecificLocationStubDispatcher(
            &LocationStub::StartPositionSessionEngineSpecificLocation,
            false,
            _stub->hasElement(10),
            std::make_tuple(static_cast< CommonAPI::SomeIP::IntegerDeployment<uint32_t>* >(nullptr), static_cast< CommonAPI::SomeIP::IntegerDeployment<uint32_t>* >(nullptr), static_cast< CommonAPI::SomeIP::IntegerDeployment<uint32_t>* >(nullptr)),
            std::make_tuple(static_cast< ::v1::com::qualcomm::qti::location::LocationTypes_::LocationStatusTDeployment_t* >(nullptr)))
        
        ,
        stopPositionSessionStubDispatcher(
            &LocationStub::StopPositionSession,
            false,
            _stub->hasElement(11),
            std::make_tuple(),
            std::make_tuple(static_cast< ::v1::com::qualcomm::qti::location::LocationTypes_::LocationStatusTDeployment_t* >(nullptr)))
        
        ,
        deleteAidingDataStubDispatcher(
            &LocationStub::DeleteAidingData,
            false,
            _stub->hasElement(12),
            std::make_tuple(static_cast< CommonAPI::SomeIP::IntegerDeployment<uint32_t>* >(nullptr)),
            std::make_tuple(static_cast< ::v1::com::qualcomm::qti::location::LocationTypes_::LocationStatusTDeployment_t* >(nullptr)))
        
        ,
        configConstellationsStubDispatcher(
            &LocationStub::ConfigConstellations,
            false,
            _stub->hasElement(13),
            std::make_tuple(static_cast< CommonAPI::SomeIP::ArrayDeployment< ::v1::com::qualcomm::qti::location::LocationTypes_::GnssSvIdInfoTDeployment_t >* >(nullptr)),
            std::make_tuple(static_cast< ::v1::com::qualcomm::qti::location::LocationTypes_::LocationStatusTDeployment_t* >(nullptr)))
        
        ,
        getLocationCapabilitiesStubDispatcher(
            &LocationStub::GetLocationCapabilities,
            false,
            _stub->hasElement(14),
            std::make_tuple(),
            std::make_tuple(static_cast< CommonAPI::SomeIP::IntegerDeployment<uint32_t>* >(nullptr)))
        
    {
        LocationSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x1) }, &injectMapMatchedFeedbackDataStubDispatcher );
        LocationSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x2) }, &startPositionSessionLocationReportStubDispatcher );
        LocationSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x3) }, &startPositionSessionEngineSpecificLocationStubDispatcher );
        LocationSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x4) }, &stopPositionSessionStubDispatcher );
        LocationSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x5) }, &deleteAidingDataStubDispatcher );
        LocationSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x6) }, &configConstellationsStubDispatcher );
        LocationSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x7) }, &getLocationCapabilitiesStubDispatcher );
        // Provided events/fields
        {
            std::set<CommonAPI::SomeIP::eventgroup_id_t> itsEventGroups;
            itsEventGroups.insert(CommonAPI::SomeIP::eventgroup_id_t(0x2002));
            CommonAPI::SomeIP::StubAdapter::registerEvent(CommonAPI::SomeIP::event_id_t(0x8001), itsEventGroups, CommonAPI::SomeIP::event_type_e::ET_EVENT, CommonAPI::SomeIP::reliability_type_e::RT_UNRELIABLE);
        }
        {
            std::set<CommonAPI::SomeIP::eventgroup_id_t> itsEventGroups;
            itsEventGroups.insert(CommonAPI::SomeIP::eventgroup_id_t(0x2001));
            CommonAPI::SomeIP::StubAdapter::registerEvent(CommonAPI::SomeIP::event_id_t(0x8002), itsEventGroups, CommonAPI::SomeIP::event_type_e::ET_EVENT, CommonAPI::SomeIP::reliability_type_e::RT_UNRELIABLE);
        }
        {
            std::set<CommonAPI::SomeIP::eventgroup_id_t> itsEventGroups;
            itsEventGroups.insert(CommonAPI::SomeIP::eventgroup_id_t(0x2001));
            CommonAPI::SomeIP::StubAdapter::registerEvent(CommonAPI::SomeIP::event_id_t(0x8003), itsEventGroups, CommonAPI::SomeIP::event_type_e::ET_EVENT, CommonAPI::SomeIP::reliability_type_e::RT_UNRELIABLE);
        }
        {
            std::set<CommonAPI::SomeIP::eventgroup_id_t> itsEventGroups;
            itsEventGroups.insert(CommonAPI::SomeIP::eventgroup_id_t(0x2001));
            CommonAPI::SomeIP::StubAdapter::registerEvent(CommonAPI::SomeIP::event_id_t(0x8004), itsEventGroups, CommonAPI::SomeIP::event_type_e::ET_EVENT, CommonAPI::SomeIP::reliability_type_e::RT_UNRELIABLE);
        }
        {
            std::set<CommonAPI::SomeIP::eventgroup_id_t> itsEventGroups;
            itsEventGroups.insert(CommonAPI::SomeIP::eventgroup_id_t(0x2001));
            CommonAPI::SomeIP::StubAdapter::registerEvent(CommonAPI::SomeIP::event_id_t(0x8005), itsEventGroups, CommonAPI::SomeIP::event_type_e::ET_EVENT, CommonAPI::SomeIP::reliability_type_e::RT_UNRELIABLE);
        }
        {
            std::set<CommonAPI::SomeIP::eventgroup_id_t> itsEventGroups;
            itsEventGroups.insert(CommonAPI::SomeIP::eventgroup_id_t(0x2001));
            CommonAPI::SomeIP::StubAdapter::registerEvent(CommonAPI::SomeIP::event_id_t(0x8006), itsEventGroups, CommonAPI::SomeIP::event_type_e::ET_EVENT, CommonAPI::SomeIP::reliability_type_e::RT_UNRELIABLE);
        }
        {
            std::set<CommonAPI::SomeIP::eventgroup_id_t> itsEventGroups;
            itsEventGroups.insert(CommonAPI::SomeIP::eventgroup_id_t(0x2001));
            CommonAPI::SomeIP::StubAdapter::registerEvent(CommonAPI::SomeIP::event_id_t(0x8007), itsEventGroups, CommonAPI::SomeIP::event_type_e::ET_EVENT, CommonAPI::SomeIP::reliability_type_e::RT_UNRELIABLE);
        }
        {
            std::set<CommonAPI::SomeIP::eventgroup_id_t> itsEventGroups;
            itsEventGroups.insert(CommonAPI::SomeIP::eventgroup_id_t(0x2001));
            CommonAPI::SomeIP::StubAdapter::registerEvent(CommonAPI::SomeIP::event_id_t(0x8008), itsEventGroups, CommonAPI::SomeIP::event_type_e::ET_EVENT, CommonAPI::SomeIP::reliability_type_e::RT_UNRELIABLE);
        }
    }

    // Register/Unregister event handlers for selective broadcasts
    void registerSelectiveEventHandlers();
    void unregisterSelectiveEventHandlers();

};

template <typename _Stub, typename... _Stubs>
void LocationSomeIPStubAdapterInternal<_Stub, _Stubs...>::fireGnssCapabilitiesEvent(const uint32_t &_capabilitiesMask) {
    CommonAPI::Deployable< uint32_t, CommonAPI::SomeIP::IntegerDeployment<uint32_t>> deployed_capabilitiesMask(_capabilitiesMask, static_cast< CommonAPI::SomeIP::IntegerDeployment<uint32_t>* >(nullptr));
    CommonAPI::SomeIP::StubEventHelper<CommonAPI::SomeIP::SerializableArguments<  CommonAPI::Deployable< uint32_t, CommonAPI::SomeIP::IntegerDeployment<uint32_t> > 
    >>
        ::sendEvent(
            *this,
            CommonAPI::SomeIP::event_id_t(0x8001),
            false,
             deployed_capabilitiesMask 
    );
}

template <typename _Stub, typename... _Stubs>
void LocationSomeIPStubAdapterInternal<_Stub, _Stubs...>::fireGnssMeasurementReportEvent(const ::v1::com::qualcomm::qti::location::LocationTypes::GnssMeasurementsT &_gnssMeasurements) {
    CommonAPI::Deployable< ::v1::com::qualcomm::qti::location::LocationTypes::GnssMeasurementsT, ::v1::com::qualcomm::qti::location::LocationTypes_::GnssMeasurementsTDeployment_t> deployed_gnssMeasurements(_gnssMeasurements, &::v1::com::qualcomm::qti::location::LocationTypes_::GnssMeasurementsTDeployment);
    CommonAPI::SomeIP::StubEventHelper<CommonAPI::SomeIP::SerializableArguments<  CommonAPI::Deployable< ::v1::com::qualcomm::qti::location::LocationTypes::GnssMeasurementsT, ::v1::com::qualcomm::qti::location::LocationTypes_::GnssMeasurementsTDeployment_t > 
    >>
        ::sendEvent(
            *this,
            CommonAPI::SomeIP::event_id_t(0x8002),
            false,
             deployed_gnssMeasurements 
    );
}

template <typename _Stub, typename... _Stubs>
void LocationSomeIPStubAdapterInternal<_Stub, _Stubs...>::fireGnssLocationReportEvent(const ::v1::com::qualcomm::qti::location::LocationTypes::LocationReportT &_locationReport) {
    CommonAPI::Deployable< ::v1::com::qualcomm::qti::location::LocationTypes::LocationReportT, ::v1::com::qualcomm::qti::location::LocationTypes_::LocationReportTDeployment_t> deployed_locationReport(_locationReport, &::v1::com::qualcomm::qti::location::LocationTypes_::LocationReportTDeployment);
    CommonAPI::SomeIP::StubEventHelper<CommonAPI::SomeIP::SerializableArguments<  CommonAPI::Deployable< ::v1::com::qualcomm::qti::location::LocationTypes::LocationReportT, ::v1::com::qualcomm::qti::location::LocationTypes_::LocationReportTDeployment_t > 
    >>
        ::sendEvent(
            *this,
            CommonAPI::SomeIP::event_id_t(0x8003),
            false,
             deployed_locationReport 
    );
}

template <typename _Stub, typename... _Stubs>
void LocationSomeIPStubAdapterInternal<_Stub, _Stubs...>::fireGnssEngineLocationsReportEvent(const std::vector< ::v1::com::qualcomm::qti::location::LocationTypes::LocationReportT > &_locationReport) {
    CommonAPI::Deployable< std::vector< ::v1::com::qualcomm::qti::location::LocationTypes::LocationReportT >, CommonAPI::SomeIP::ArrayDeployment< ::v1::com::qualcomm::qti::location::LocationTypes_::LocationReportTDeployment_t >> deployed_locationReport(_locationReport, &::v1::com::qualcomm::qti::location::Location_::GnssEngineLocationsReport_locationReportDeployment);
    CommonAPI::SomeIP::StubEventHelper<CommonAPI::SomeIP::SerializableArguments<  CommonAPI::Deployable< std::vector< ::v1::com::qualcomm::qti::location::LocationTypes::LocationReportT >, CommonAPI::SomeIP::ArrayDeployment< ::v1::com::qualcomm::qti::location::LocationTypes_::LocationReportTDeployment_t > > 
    >>
        ::sendEvent(
            *this,
            CommonAPI::SomeIP::event_id_t(0x8004),
            false,
             deployed_locationReport 
    );
}

template <typename _Stub, typename... _Stubs>
void LocationSomeIPStubAdapterInternal<_Stub, _Stubs...>::fireGnssSvReportEvent(const std::vector< ::v1::com::qualcomm::qti::location::LocationTypes::GnssSvDataT > &_gnssSv) {
    CommonAPI::Deployable< std::vector< ::v1::com::qualcomm::qti::location::LocationTypes::GnssSvDataT >, CommonAPI::SomeIP::ArrayDeployment< ::v1::com::qualcomm::qti::location::LocationTypes_::GnssSvDataTDeployment_t >> deployed_gnssSv(_gnssSv, &::v1::com::qualcomm::qti::location::Location_::GnssSvReport_gnssSvDeployment);
    CommonAPI::SomeIP::StubEventHelper<CommonAPI::SomeIP::SerializableArguments<  CommonAPI::Deployable< std::vector< ::v1::com::qualcomm::qti::location::LocationTypes::GnssSvDataT >, CommonAPI::SomeIP::ArrayDeployment< ::v1::com::qualcomm::qti::location::LocationTypes_::GnssSvDataTDeployment_t > > 
    >>
        ::sendEvent(
            *this,
            CommonAPI::SomeIP::event_id_t(0x8005),
            false,
             deployed_gnssSv 
    );
}

template <typename _Stub, typename... _Stubs>
void LocationSomeIPStubAdapterInternal<_Stub, _Stubs...>::fireGnssNmeaEvent(const uint64_t &_timestamp, const std::string &_nmea) {
    CommonAPI::Deployable< uint64_t, CommonAPI::SomeIP::IntegerDeployment<uint64_t>> deployed_timestamp(_timestamp, static_cast< CommonAPI::SomeIP::IntegerDeployment<uint64_t>* >(nullptr));
    CommonAPI::Deployable< std::string, CommonAPI::SomeIP::StringDeployment> deployed_nmea(_nmea, static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr));
    CommonAPI::SomeIP::StubEventHelper<CommonAPI::SomeIP::SerializableArguments<  CommonAPI::Deployable< uint64_t, CommonAPI::SomeIP::IntegerDeployment<uint64_t> > 
    ,  CommonAPI::Deployable< std::string, CommonAPI::SomeIP::StringDeployment > 
    >>
        ::sendEvent(
            *this,
            CommonAPI::SomeIP::event_id_t(0x8006),
            false,
             deployed_timestamp 
            ,  deployed_nmea 
    );
}

template <typename _Stub, typename... _Stubs>
void LocationSomeIPStubAdapterInternal<_Stub, _Stubs...>::fireEngineNmeaEvent(const ::v1::com::qualcomm::qti::location::LocationTypes::LocOutputEngineTypeT &_engType, const uint64_t &_timestamp, const std::string &_nmea) {
    CommonAPI::Deployable< ::v1::com::qualcomm::qti::location::LocationTypes::LocOutputEngineTypeT, ::v1::com::qualcomm::qti::location::LocationTypes_::LocOutputEngineTypeTDeployment_t> deployed_engType(_engType, static_cast< ::v1::com::qualcomm::qti::location::LocationTypes_::LocOutputEngineTypeTDeployment_t* >(nullptr));
    CommonAPI::Deployable< uint64_t, CommonAPI::SomeIP::IntegerDeployment<uint64_t>> deployed_timestamp(_timestamp, static_cast< CommonAPI::SomeIP::IntegerDeployment<uint64_t>* >(nullptr));
    CommonAPI::Deployable< std::string, CommonAPI::SomeIP::StringDeployment> deployed_nmea(_nmea, static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr));
    CommonAPI::SomeIP::StubEventHelper<CommonAPI::SomeIP::SerializableArguments<  CommonAPI::Deployable< ::v1::com::qualcomm::qti::location::LocationTypes::LocOutputEngineTypeT, ::v1::com::qualcomm::qti::location::LocationTypes_::LocOutputEngineTypeTDeployment_t > 
    ,  CommonAPI::Deployable< uint64_t, CommonAPI::SomeIP::IntegerDeployment<uint64_t> > 
    ,  CommonAPI::Deployable< std::string, CommonAPI::SomeIP::StringDeployment > 
    >>
        ::sendEvent(
            *this,
            CommonAPI::SomeIP::event_id_t(0x8007),
            false,
             deployed_engType 
            ,  deployed_timestamp 
            ,  deployed_nmea 
    );
}

template <typename _Stub, typename... _Stubs>
void LocationSomeIPStubAdapterInternal<_Stub, _Stubs...>::fireGnssDataReportEvent(const ::v1::com::qualcomm::qti::location::LocationTypes::GnssDataT &_gnssData) {
    CommonAPI::Deployable< ::v1::com::qualcomm::qti::location::LocationTypes::GnssDataT, ::v1::com::qualcomm::qti::location::LocationTypes_::GnssDataTDeployment_t> deployed_gnssData(_gnssData, static_cast< ::v1::com::qualcomm::qti::location::LocationTypes_::GnssDataTDeployment_t* >(nullptr));
    CommonAPI::SomeIP::StubEventHelper<CommonAPI::SomeIP::SerializableArguments<  CommonAPI::Deployable< ::v1::com::qualcomm::qti::location::LocationTypes::GnssDataT, ::v1::com::qualcomm::qti::location::LocationTypes_::GnssDataTDeployment_t > 
    >>
        ::sendEvent(
            *this,
            CommonAPI::SomeIP::event_id_t(0x8008),
            false,
             deployed_gnssData 
    );
}


template <typename _Stub, typename... _Stubs>
void LocationSomeIPStubAdapterInternal<_Stub, _Stubs...>::registerSelectiveEventHandlers() {
}

template <typename _Stub, typename... _Stubs>
void LocationSomeIPStubAdapterInternal<_Stub, _Stubs...>::unregisterSelectiveEventHandlers() {
}

template <typename _Stub = ::v1::com::qualcomm::qti::location::LocationStub, typename... _Stubs>
class LocationSomeIPStubAdapter
    : public LocationSomeIPStubAdapterInternal<_Stub, _Stubs...> {
public:
    LocationSomeIPStubAdapter(const CommonAPI::SomeIP::Address &_address,
                                            const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection,
                                            const std::shared_ptr<CommonAPI::StubBase> &_stub)
        : CommonAPI::SomeIP::StubAdapter(_address, _connection),
          LocationSomeIPStubAdapterInternal<_Stub, _Stubs...>(_address, _connection, _stub) {
    }
};

} // namespace location
} // namespace qti
} // namespace qualcomm
} // namespace com
} // namespace v1

#endif // V1_COM_QUALCOMM_QTI_LOCATION_Location_SOMEIP_STUB_ADAPTER_HPP_
