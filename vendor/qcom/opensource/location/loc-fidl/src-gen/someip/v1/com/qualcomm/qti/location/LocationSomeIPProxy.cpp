/*
 * This file was generated by the CommonAPI Generators.
 * Used org.genivi.commonapi.someip 3.2.0.v202012010944.
 * Used org.franca.core 0.13.1.201807231814.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
 * If a copy of the MPL was not distributed with this file, You can obtain one at
 * http://mozilla.org/MPL/2.0/.
 */
#include <v1/com/qualcomm/qti/location/LocationSomeIPProxy.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#define HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

#include <CommonAPI/SomeIP/AddressTranslator.hpp>

#if defined (HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE)
#undef COMMONAPI_INTERNAL_COMPILATION
#undef HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

namespace v1 {
namespace com {
namespace qualcomm {
namespace qti {
namespace location {

std::shared_ptr<CommonAPI::SomeIP::Proxy> createLocationSomeIPProxy(
    const CommonAPI::SomeIP::Address &_address,
    const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection) {
    return std::make_shared< LocationSomeIPProxy>(_address, _connection);
}

void initializeLocationSomeIPProxy() {
    CommonAPI::SomeIP::AddressTranslator::get()->insert(
        "local:com.qualcomm.qti.location.Location:v1_0:com.qualcomm.qti.location.Location",
        0xee00, 0x1, 1, 0);
    CommonAPI::SomeIP::Factory::get()->registerProxyCreateMethod(
        "com.qualcomm.qti.location.Location:v1_0",
        &createLocationSomeIPProxy);
}

INITIALIZER(registerLocationSomeIPProxy) {
    CommonAPI::SomeIP::Factory::get()->registerInterface(initializeLocationSomeIPProxy);
}

LocationSomeIPProxy::LocationSomeIPProxy(
    const CommonAPI::SomeIP::Address &_address,
    const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection)
        : CommonAPI::SomeIP::Proxy(_address, _connection),
          gnssCapabilities_(*this, 0x2002, CommonAPI::SomeIP::event_id_t(0x8001), CommonAPI::SomeIP::event_type_e::ET_EVENT , CommonAPI::SomeIP::reliability_type_e::RT_UNRELIABLE, false, std::make_tuple(static_cast< CommonAPI::SomeIP::IntegerDeployment<uint32_t>* >(nullptr))),
          gnssMeasurementReport_(*this, 0x2001, CommonAPI::SomeIP::event_id_t(0x8002), CommonAPI::SomeIP::event_type_e::ET_EVENT , CommonAPI::SomeIP::reliability_type_e::RT_UNRELIABLE, false, std::make_tuple(&::v1::com::qualcomm::qti::location::LocationTypes_::GnssMeasurementsTDeployment)),
          gnssLocationReport_(*this, 0x2001, CommonAPI::SomeIP::event_id_t(0x8003), CommonAPI::SomeIP::event_type_e::ET_EVENT , CommonAPI::SomeIP::reliability_type_e::RT_UNRELIABLE, false, std::make_tuple(&::v1::com::qualcomm::qti::location::LocationTypes_::LocationReportTDeployment)),
          gnssEngineLocationsReport_(*this, 0x2001, CommonAPI::SomeIP::event_id_t(0x8004), CommonAPI::SomeIP::event_type_e::ET_EVENT , CommonAPI::SomeIP::reliability_type_e::RT_UNRELIABLE, false, std::make_tuple(&::v1::com::qualcomm::qti::location::Location_::GnssEngineLocationsReport_locationReportDeployment)),
          gnssSvReport_(*this, 0x2001, CommonAPI::SomeIP::event_id_t(0x8005), CommonAPI::SomeIP::event_type_e::ET_EVENT , CommonAPI::SomeIP::reliability_type_e::RT_UNRELIABLE, false, std::make_tuple(&::v1::com::qualcomm::qti::location::Location_::GnssSvReport_gnssSvDeployment)),
          gnssNmea_(*this, 0x2001, CommonAPI::SomeIP::event_id_t(0x8006), CommonAPI::SomeIP::event_type_e::ET_EVENT , CommonAPI::SomeIP::reliability_type_e::RT_UNRELIABLE, false, std::make_tuple(static_cast< CommonAPI::SomeIP::IntegerDeployment<uint64_t>* >(nullptr), static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr))),
          engineNmea_(*this, 0x2001, CommonAPI::SomeIP::event_id_t(0x8007), CommonAPI::SomeIP::event_type_e::ET_EVENT , CommonAPI::SomeIP::reliability_type_e::RT_UNRELIABLE, false, std::make_tuple(static_cast< ::v1::com::qualcomm::qti::location::LocationTypes_::LocOutputEngineTypeTDeployment_t* >(nullptr), static_cast< CommonAPI::SomeIP::IntegerDeployment<uint64_t>* >(nullptr), static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr))),
          gnssDataReport_(*this, 0x2001, CommonAPI::SomeIP::event_id_t(0x8008), CommonAPI::SomeIP::event_type_e::ET_EVENT , CommonAPI::SomeIP::reliability_type_e::RT_UNRELIABLE, false, std::make_tuple(static_cast< ::v1::com::qualcomm::qti::location::LocationTypes_::GnssDataTDeployment_t* >(nullptr)))
{
}

LocationSomeIPProxy::~LocationSomeIPProxy() {
    completed_.set_value();
}


LocationSomeIPProxy::GnssCapabilitiesEvent& LocationSomeIPProxy::getGnssCapabilitiesEvent() {
    return gnssCapabilities_;
}
LocationSomeIPProxy::GnssMeasurementReportEvent& LocationSomeIPProxy::getGnssMeasurementReportEvent() {
    return gnssMeasurementReport_;
}
LocationSomeIPProxy::GnssLocationReportEvent& LocationSomeIPProxy::getGnssLocationReportEvent() {
    return gnssLocationReport_;
}
LocationSomeIPProxy::GnssEngineLocationsReportEvent& LocationSomeIPProxy::getGnssEngineLocationsReportEvent() {
    return gnssEngineLocationsReport_;
}
LocationSomeIPProxy::GnssSvReportEvent& LocationSomeIPProxy::getGnssSvReportEvent() {
    return gnssSvReport_;
}
LocationSomeIPProxy::GnssNmeaEvent& LocationSomeIPProxy::getGnssNmeaEvent() {
    return gnssNmea_;
}
LocationSomeIPProxy::EngineNmeaEvent& LocationSomeIPProxy::getEngineNmeaEvent() {
    return engineNmea_;
}
LocationSomeIPProxy::GnssDataReportEvent& LocationSomeIPProxy::getGnssDataReportEvent() {
    return gnssDataReport_;
}

void LocationSomeIPProxy::InjectMapMatchedFeedbackData(::v1::com::qualcomm::qti::location::LocationTypes::MapMatchingFeedbackDataT _mmfData, CommonAPI::CallStatus &_internalCallStatus) {
    CommonAPI::Deployable< ::v1::com::qualcomm::qti::location::LocationTypes::MapMatchingFeedbackDataT, ::v1::com::qualcomm::qti::location::LocationTypes_::MapMatchingFeedbackDataTDeployment_t> deploy_mmfData(_mmfData, static_cast< ::v1::com::qualcomm::qti::location::LocationTypes_::MapMatchingFeedbackDataTDeployment_t* >(nullptr));
    CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                ::v1::com::qualcomm::qti::location::LocationTypes::MapMatchingFeedbackDataT,
                ::v1::com::qualcomm::qti::location::LocationTypes_::MapMatchingFeedbackDataTDeployment_t
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
        >
    >::callMethod(
        *this,
        CommonAPI::SomeIP::method_id_t(0x1),
        false,
        false,
        deploy_mmfData,
        _internalCallStatus);
}

void LocationSomeIPProxy::StartPositionSessionLocationReport(uint32_t _intervalInMs, uint32_t _gnssReportCallbackMask, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::qualcomm::qti::location::LocationTypes::LocationStatusT &_status, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< uint32_t, CommonAPI::SomeIP::IntegerDeployment<uint32_t>> deploy_intervalInMs(_intervalInMs, static_cast< CommonAPI::SomeIP::IntegerDeployment<uint32_t>* >(nullptr));
    CommonAPI::Deployable< uint32_t, CommonAPI::SomeIP::IntegerDeployment<uint32_t>> deploy_gnssReportCallbackMask(_gnssReportCallbackMask, static_cast< CommonAPI::SomeIP::IntegerDeployment<uint32_t>* >(nullptr));
    CommonAPI::Deployable< ::v1::com::qualcomm::qti::location::LocationTypes::LocationStatusT, ::v1::com::qualcomm::qti::location::LocationTypes_::LocationStatusTDeployment_t> deploy_status(static_cast< ::v1::com::qualcomm::qti::location::LocationTypes_::LocationStatusTDeployment_t* >(nullptr));
    CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                uint32_t,
                CommonAPI::SomeIP::IntegerDeployment<uint32_t>
            >,
            CommonAPI::Deployable<
                uint32_t,
                CommonAPI::SomeIP::IntegerDeployment<uint32_t>
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                ::v1::com::qualcomm::qti::location::LocationTypes::LocationStatusT,
                ::v1::com::qualcomm::qti::location::LocationTypes_::LocationStatusTDeployment_t
            >
        >
    >::callMethodWithReply(
        *this,
        CommonAPI::SomeIP::method_id_t(0x2),
        false,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        deploy_intervalInMs, deploy_gnssReportCallbackMask,
        _internalCallStatus,
        deploy_status);
    _status = deploy_status.getValue();
}

std::future<CommonAPI::CallStatus> LocationSomeIPProxy::StartPositionSessionLocationReportAsync(const uint32_t &_intervalInMs, const uint32_t &_gnssReportCallbackMask, StartPositionSessionLocationReportAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< uint32_t, CommonAPI::SomeIP::IntegerDeployment<uint32_t>> deploy_intervalInMs(_intervalInMs, static_cast< CommonAPI::SomeIP::IntegerDeployment<uint32_t>* >(nullptr));
    CommonAPI::Deployable< uint32_t, CommonAPI::SomeIP::IntegerDeployment<uint32_t>> deploy_gnssReportCallbackMask(_gnssReportCallbackMask, static_cast< CommonAPI::SomeIP::IntegerDeployment<uint32_t>* >(nullptr));
    CommonAPI::Deployable< ::v1::com::qualcomm::qti::location::LocationTypes::LocationStatusT, ::v1::com::qualcomm::qti::location::LocationTypes_::LocationStatusTDeployment_t> deploy_status(static_cast< ::v1::com::qualcomm::qti::location::LocationTypes_::LocationStatusTDeployment_t* >(nullptr));
    return CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                uint32_t,
                CommonAPI::SomeIP::IntegerDeployment<uint32_t>
            >,
            CommonAPI::Deployable<
                uint32_t,
                CommonAPI::SomeIP::IntegerDeployment<uint32_t>
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                ::v1::com::qualcomm::qti::location::LocationTypes::LocationStatusT,
                ::v1::com::qualcomm::qti::location::LocationTypes_::LocationStatusTDeployment_t
            >
        >
    >::callMethodAsync(
        *this,
        CommonAPI::SomeIP::method_id_t(0x2),
        false,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        deploy_intervalInMs, deploy_gnssReportCallbackMask,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< ::v1::com::qualcomm::qti::location::LocationTypes::LocationStatusT, ::v1::com::qualcomm::qti::location::LocationTypes_::LocationStatusTDeployment_t > _status) {
            if (_callback)
                _callback(_internalCallStatus, _status.getValue());
        },
        std::make_tuple(deploy_status));
}

void LocationSomeIPProxy::StartPositionSessionEngineSpecificLocation(uint32_t _intervalInMs, uint32_t _locReqEngMask, uint32_t _engReportCallbackMask, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::qualcomm::qti::location::LocationTypes::LocationStatusT &_status, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< uint32_t, CommonAPI::SomeIP::IntegerDeployment<uint32_t>> deploy_intervalInMs(_intervalInMs, static_cast< CommonAPI::SomeIP::IntegerDeployment<uint32_t>* >(nullptr));
    CommonAPI::Deployable< uint32_t, CommonAPI::SomeIP::IntegerDeployment<uint32_t>> deploy_locReqEngMask(_locReqEngMask, static_cast< CommonAPI::SomeIP::IntegerDeployment<uint32_t>* >(nullptr));
    CommonAPI::Deployable< uint32_t, CommonAPI::SomeIP::IntegerDeployment<uint32_t>> deploy_engReportCallbackMask(_engReportCallbackMask, static_cast< CommonAPI::SomeIP::IntegerDeployment<uint32_t>* >(nullptr));
    CommonAPI::Deployable< ::v1::com::qualcomm::qti::location::LocationTypes::LocationStatusT, ::v1::com::qualcomm::qti::location::LocationTypes_::LocationStatusTDeployment_t> deploy_status(static_cast< ::v1::com::qualcomm::qti::location::LocationTypes_::LocationStatusTDeployment_t* >(nullptr));
    CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                uint32_t,
                CommonAPI::SomeIP::IntegerDeployment<uint32_t>
            >,
            CommonAPI::Deployable<
                uint32_t,
                CommonAPI::SomeIP::IntegerDeployment<uint32_t>
            >,
            CommonAPI::Deployable<
                uint32_t,
                CommonAPI::SomeIP::IntegerDeployment<uint32_t>
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                ::v1::com::qualcomm::qti::location::LocationTypes::LocationStatusT,
                ::v1::com::qualcomm::qti::location::LocationTypes_::LocationStatusTDeployment_t
            >
        >
    >::callMethodWithReply(
        *this,
        CommonAPI::SomeIP::method_id_t(0x3),
        false,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        deploy_intervalInMs, deploy_locReqEngMask, deploy_engReportCallbackMask,
        _internalCallStatus,
        deploy_status);
    _status = deploy_status.getValue();
}

std::future<CommonAPI::CallStatus> LocationSomeIPProxy::StartPositionSessionEngineSpecificLocationAsync(const uint32_t &_intervalInMs, const uint32_t &_locReqEngMask, const uint32_t &_engReportCallbackMask, StartPositionSessionEngineSpecificLocationAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< uint32_t, CommonAPI::SomeIP::IntegerDeployment<uint32_t>> deploy_intervalInMs(_intervalInMs, static_cast< CommonAPI::SomeIP::IntegerDeployment<uint32_t>* >(nullptr));
    CommonAPI::Deployable< uint32_t, CommonAPI::SomeIP::IntegerDeployment<uint32_t>> deploy_locReqEngMask(_locReqEngMask, static_cast< CommonAPI::SomeIP::IntegerDeployment<uint32_t>* >(nullptr));
    CommonAPI::Deployable< uint32_t, CommonAPI::SomeIP::IntegerDeployment<uint32_t>> deploy_engReportCallbackMask(_engReportCallbackMask, static_cast< CommonAPI::SomeIP::IntegerDeployment<uint32_t>* >(nullptr));
    CommonAPI::Deployable< ::v1::com::qualcomm::qti::location::LocationTypes::LocationStatusT, ::v1::com::qualcomm::qti::location::LocationTypes_::LocationStatusTDeployment_t> deploy_status(static_cast< ::v1::com::qualcomm::qti::location::LocationTypes_::LocationStatusTDeployment_t* >(nullptr));
    return CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                uint32_t,
                CommonAPI::SomeIP::IntegerDeployment<uint32_t>
            >,
            CommonAPI::Deployable<
                uint32_t,
                CommonAPI::SomeIP::IntegerDeployment<uint32_t>
            >,
            CommonAPI::Deployable<
                uint32_t,
                CommonAPI::SomeIP::IntegerDeployment<uint32_t>
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                ::v1::com::qualcomm::qti::location::LocationTypes::LocationStatusT,
                ::v1::com::qualcomm::qti::location::LocationTypes_::LocationStatusTDeployment_t
            >
        >
    >::callMethodAsync(
        *this,
        CommonAPI::SomeIP::method_id_t(0x3),
        false,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        deploy_intervalInMs, deploy_locReqEngMask, deploy_engReportCallbackMask,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< ::v1::com::qualcomm::qti::location::LocationTypes::LocationStatusT, ::v1::com::qualcomm::qti::location::LocationTypes_::LocationStatusTDeployment_t > _status) {
            if (_callback)
                _callback(_internalCallStatus, _status.getValue());
        },
        std::make_tuple(deploy_status));
}

void LocationSomeIPProxy::StopPositionSession(CommonAPI::CallStatus &_internalCallStatus, ::v1::com::qualcomm::qti::location::LocationTypes::LocationStatusT &_status, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< ::v1::com::qualcomm::qti::location::LocationTypes::LocationStatusT, ::v1::com::qualcomm::qti::location::LocationTypes_::LocationStatusTDeployment_t> deploy_status(static_cast< ::v1::com::qualcomm::qti::location::LocationTypes_::LocationStatusTDeployment_t* >(nullptr));
    CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                ::v1::com::qualcomm::qti::location::LocationTypes::LocationStatusT,
                ::v1::com::qualcomm::qti::location::LocationTypes_::LocationStatusTDeployment_t
            >
        >
    >::callMethodWithReply(
        *this,
        CommonAPI::SomeIP::method_id_t(0x4),
        false,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        _internalCallStatus,
        deploy_status);
    _status = deploy_status.getValue();
}

std::future<CommonAPI::CallStatus> LocationSomeIPProxy::StopPositionSessionAsync(StopPositionSessionAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< ::v1::com::qualcomm::qti::location::LocationTypes::LocationStatusT, ::v1::com::qualcomm::qti::location::LocationTypes_::LocationStatusTDeployment_t> deploy_status(static_cast< ::v1::com::qualcomm::qti::location::LocationTypes_::LocationStatusTDeployment_t* >(nullptr));
    return CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                ::v1::com::qualcomm::qti::location::LocationTypes::LocationStatusT,
                ::v1::com::qualcomm::qti::location::LocationTypes_::LocationStatusTDeployment_t
            >
        >
    >::callMethodAsync(
        *this,
        CommonAPI::SomeIP::method_id_t(0x4),
        false,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< ::v1::com::qualcomm::qti::location::LocationTypes::LocationStatusT, ::v1::com::qualcomm::qti::location::LocationTypes_::LocationStatusTDeployment_t > _status) {
            if (_callback)
                _callback(_internalCallStatus, _status.getValue());
        },
        std::make_tuple(deploy_status));
}

void LocationSomeIPProxy::DeleteAidingData(uint32_t _deleteMask, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::qualcomm::qti::location::LocationTypes::LocationStatusT &_status, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< uint32_t, CommonAPI::SomeIP::IntegerDeployment<uint32_t>> deploy_deleteMask(_deleteMask, static_cast< CommonAPI::SomeIP::IntegerDeployment<uint32_t>* >(nullptr));
    CommonAPI::Deployable< ::v1::com::qualcomm::qti::location::LocationTypes::LocationStatusT, ::v1::com::qualcomm::qti::location::LocationTypes_::LocationStatusTDeployment_t> deploy_status(static_cast< ::v1::com::qualcomm::qti::location::LocationTypes_::LocationStatusTDeployment_t* >(nullptr));
    CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                uint32_t,
                CommonAPI::SomeIP::IntegerDeployment<uint32_t>
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                ::v1::com::qualcomm::qti::location::LocationTypes::LocationStatusT,
                ::v1::com::qualcomm::qti::location::LocationTypes_::LocationStatusTDeployment_t
            >
        >
    >::callMethodWithReply(
        *this,
        CommonAPI::SomeIP::method_id_t(0x5),
        false,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        deploy_deleteMask,
        _internalCallStatus,
        deploy_status);
    _status = deploy_status.getValue();
}

std::future<CommonAPI::CallStatus> LocationSomeIPProxy::DeleteAidingDataAsync(const uint32_t &_deleteMask, DeleteAidingDataAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< uint32_t, CommonAPI::SomeIP::IntegerDeployment<uint32_t>> deploy_deleteMask(_deleteMask, static_cast< CommonAPI::SomeIP::IntegerDeployment<uint32_t>* >(nullptr));
    CommonAPI::Deployable< ::v1::com::qualcomm::qti::location::LocationTypes::LocationStatusT, ::v1::com::qualcomm::qti::location::LocationTypes_::LocationStatusTDeployment_t> deploy_status(static_cast< ::v1::com::qualcomm::qti::location::LocationTypes_::LocationStatusTDeployment_t* >(nullptr));
    return CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                uint32_t,
                CommonAPI::SomeIP::IntegerDeployment<uint32_t>
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                ::v1::com::qualcomm::qti::location::LocationTypes::LocationStatusT,
                ::v1::com::qualcomm::qti::location::LocationTypes_::LocationStatusTDeployment_t
            >
        >
    >::callMethodAsync(
        *this,
        CommonAPI::SomeIP::method_id_t(0x5),
        false,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        deploy_deleteMask,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< ::v1::com::qualcomm::qti::location::LocationTypes::LocationStatusT, ::v1::com::qualcomm::qti::location::LocationTypes_::LocationStatusTDeployment_t > _status) {
            if (_callback)
                _callback(_internalCallStatus, _status.getValue());
        },
        std::make_tuple(deploy_status));
}

void LocationSomeIPProxy::ConfigConstellations(std::vector< ::v1::com::qualcomm::qti::location::LocationTypes::GnssSvIdInfoT > _svList, CommonAPI::CallStatus &_internalCallStatus, ::v1::com::qualcomm::qti::location::LocationTypes::LocationStatusT &_status, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< std::vector< ::v1::com::qualcomm::qti::location::LocationTypes::GnssSvIdInfoT >, CommonAPI::SomeIP::ArrayDeployment< ::v1::com::qualcomm::qti::location::LocationTypes_::GnssSvIdInfoTDeployment_t >> deploy_svList(_svList, static_cast< CommonAPI::SomeIP::ArrayDeployment< ::v1::com::qualcomm::qti::location::LocationTypes_::GnssSvIdInfoTDeployment_t >* >(nullptr));
    CommonAPI::Deployable< ::v1::com::qualcomm::qti::location::LocationTypes::LocationStatusT, ::v1::com::qualcomm::qti::location::LocationTypes_::LocationStatusTDeployment_t> deploy_status(static_cast< ::v1::com::qualcomm::qti::location::LocationTypes_::LocationStatusTDeployment_t* >(nullptr));
    CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                std::vector< ::v1::com::qualcomm::qti::location::LocationTypes::GnssSvIdInfoT >,
                CommonAPI::SomeIP::ArrayDeployment< ::v1::com::qualcomm::qti::location::LocationTypes_::GnssSvIdInfoTDeployment_t >
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                ::v1::com::qualcomm::qti::location::LocationTypes::LocationStatusT,
                ::v1::com::qualcomm::qti::location::LocationTypes_::LocationStatusTDeployment_t
            >
        >
    >::callMethodWithReply(
        *this,
        CommonAPI::SomeIP::method_id_t(0x6),
        false,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        deploy_svList,
        _internalCallStatus,
        deploy_status);
    _status = deploy_status.getValue();
}

std::future<CommonAPI::CallStatus> LocationSomeIPProxy::ConfigConstellationsAsync(const std::vector< ::v1::com::qualcomm::qti::location::LocationTypes::GnssSvIdInfoT > &_svList, ConfigConstellationsAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< std::vector< ::v1::com::qualcomm::qti::location::LocationTypes::GnssSvIdInfoT >, CommonAPI::SomeIP::ArrayDeployment< ::v1::com::qualcomm::qti::location::LocationTypes_::GnssSvIdInfoTDeployment_t >> deploy_svList(_svList, static_cast< CommonAPI::SomeIP::ArrayDeployment< ::v1::com::qualcomm::qti::location::LocationTypes_::GnssSvIdInfoTDeployment_t >* >(nullptr));
    CommonAPI::Deployable< ::v1::com::qualcomm::qti::location::LocationTypes::LocationStatusT, ::v1::com::qualcomm::qti::location::LocationTypes_::LocationStatusTDeployment_t> deploy_status(static_cast< ::v1::com::qualcomm::qti::location::LocationTypes_::LocationStatusTDeployment_t* >(nullptr));
    return CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                std::vector< ::v1::com::qualcomm::qti::location::LocationTypes::GnssSvIdInfoT >,
                CommonAPI::SomeIP::ArrayDeployment< ::v1::com::qualcomm::qti::location::LocationTypes_::GnssSvIdInfoTDeployment_t >
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                ::v1::com::qualcomm::qti::location::LocationTypes::LocationStatusT,
                ::v1::com::qualcomm::qti::location::LocationTypes_::LocationStatusTDeployment_t
            >
        >
    >::callMethodAsync(
        *this,
        CommonAPI::SomeIP::method_id_t(0x6),
        false,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        deploy_svList,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< ::v1::com::qualcomm::qti::location::LocationTypes::LocationStatusT, ::v1::com::qualcomm::qti::location::LocationTypes_::LocationStatusTDeployment_t > _status) {
            if (_callback)
                _callback(_internalCallStatus, _status.getValue());
        },
        std::make_tuple(deploy_status));
}

void LocationSomeIPProxy::GetLocationCapabilities(CommonAPI::CallStatus &_internalCallStatus, uint32_t &_capabilitiesMask, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< uint32_t, CommonAPI::SomeIP::IntegerDeployment<uint32_t>> deploy_capabilitiesMask(static_cast< CommonAPI::SomeIP::IntegerDeployment<uint32_t>* >(nullptr));
    CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                uint32_t,
                CommonAPI::SomeIP::IntegerDeployment<uint32_t>
            >
        >
    >::callMethodWithReply(
        *this,
        CommonAPI::SomeIP::method_id_t(0x7),
        false,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        _internalCallStatus,
        deploy_capabilitiesMask);
    _capabilitiesMask = deploy_capabilitiesMask.getValue();
}

std::future<CommonAPI::CallStatus> LocationSomeIPProxy::GetLocationCapabilitiesAsync(GetLocationCapabilitiesAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< uint32_t, CommonAPI::SomeIP::IntegerDeployment<uint32_t>> deploy_capabilitiesMask(static_cast< CommonAPI::SomeIP::IntegerDeployment<uint32_t>* >(nullptr));
    return CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                uint32_t,
                CommonAPI::SomeIP::IntegerDeployment<uint32_t>
            >
        >
    >::callMethodAsync(
        *this,
        CommonAPI::SomeIP::method_id_t(0x7),
        false,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< uint32_t, CommonAPI::SomeIP::IntegerDeployment<uint32_t> > _capabilitiesMask) {
            if (_callback)
                _callback(_internalCallStatus, _capabilitiesMask.getValue());
        },
        std::make_tuple(deploy_capabilitiesMask));
}

void LocationSomeIPProxy::getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const {
    ownVersionMajor = 1;
    ownVersionMinor = 0;
}

std::future<void> LocationSomeIPProxy::getCompletionFuture() {
    return completed_.get_future();
}

} // namespace location
} // namespace qti
} // namespace qualcomm
} // namespace com
} // namespace v1
